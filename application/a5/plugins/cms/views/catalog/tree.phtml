<script type="text/javascript">
<? A5::url_for_default("javascript") ?>
var plus = new Image; plus.src="<?= CMS_PUBLIC_URI ?>/pics/p.gif";
var minus = new Image; minus.src="<?= CMS_PUBLIC_URI ?>/pics/m.gif";

var root_window_url = parent.location;
var queue_nodes = [];
var selected_nodes = {};
var cookie_opened_roots_name = '___cms___opened_nodes';
var cookie_opened_roots = {};
var click_on_load_is_done = false;

/*
Данная функция разворачивает дерево начиная с корневой ноды до указанной,
Параметры (params):
node_id - id ноды до которой нужно развернуть дерево
load_node_childs - массив со списком id нод дочерние ноды котоорых нужно по-любому загрузить, даже если они уже были загружены
node_inclusive - если true - значит нужно развернуть дочерние ноды от node_id если она их имеет
*/
function expand_tree(nodes, params)
{
	var query_params = [];
	if (!params) { params = {}; }
	for (var i = 0, c = nodes.length; i < c; i++) { query_params.push({'to_nodes[]': nodes[i]}); }
	if (params['node_inclusive']) { query_params.push({'to_node_inclusive': 1}); }
	if (params['load_node_childs'] && params['load_node_childs'].length)
	{
		for (var i = 0, c = params['load_node_childs'].length; i < c; i++)
		{ query_params.push({'load_node_childs[]': params['load_node_childs'][i]}); }
	}
	AJAX.run('<?= url_for("@overwrite", true, "action", "expand-tree") ?>', query_params, 'POST');
}

function process_queue()
{
	if (queue_nodes.length)
	{
		var next_node = queue_nodes.shift();
		expand_node(next_node['id'], next_node['level'], next_node['load']);
	}
	else { restore_selection(); }
}

function expand_node(node_id, node_level, node_load, only_expand_or_collapse)
{
	if (o = $('node_childs_' + node_id))
	{
		var node_childs_loaded = (o.innerHTML != '' ? true : false);
		var node_plus_minus_img = $('node_plus_minus_img_' + node_id);

		var loading_html = '';
		loading_html += '<table class="tree_item"><tr>';
		loading_html += '<td><img src="<?= CMS_PUBLIC_URI ?>/pics/spacer.gif" width="' + ((parseInt(node_level) + 1) * 16 + 1) + '" height="16" border="0" alt=""></td>';
		loading_html += '<td width="100%"><span class="graytext">Загрузка ...</span></td>';
		loading_html += '</tr></table>';

		// Если дочерние ветки не раскрыты - раскрываем
		if (o.style.display == 'none')
		{
			if (!node_childs_loaded || node_load) { o.innerHTML = loading_html; }
			o.style.display = '';
			if (node_plus_minus_img) { node_plus_minus_img.src = minus.src; }
		}
		else if (only_expand_or_collapse)
		{
			o.style.display = 'none';
			if (node_plus_minus_img) { node_plus_minus_img.src = plus.src; }
		}

		// Если дочерние ветки не загружены - или сказано загрузить в любом случае их
		if (!node_childs_loaded || node_load)
		{ AJAX.update(o, '<?= url_for("@overwrite", true, "action", "load-childs") ?>', {'parent_node_id': node_id}); }
		else { process_queue(); }
	}
	else if (!only_expand_or_collapse) { process_queue(); }
}
function expand_or_collapse_node(node_id, node_level) { expand_node(node_id, node_level, false, true); }

function clicked_on_body(evt)
{
	// Проверим не кликнули ли мы по узлу
	var is_clicked_on_node = false;
	if (evt)
	{
		var elem = evt.target || window.event.srcElement;
		try
		{
			while (elem)
			{
				if (elem.tagName == 'IMG' && elem.id.indexOf('node_plus_minus_img_') >= 0) { is_clicked_on_node = true; break; }
				if (elem.tagName == 'TD' && elem.id.indexOf('node_icon_') >= 0) { is_clicked_on_node = true; break; }
				if (elem.tagName == 'TD' && elem.id.indexOf('node_content_') >= 0) { is_clicked_on_node = true; break; }
				if (elem.tagName == 'TD' && elem.className == 'tree_item') { break; }
				elem = elem.parentNode;
			}
		} catch (err) {;}
	}
	if (!is_clicked_on_node) { unselect_all(); }
}

function check_all_buttons()
{
	var imgs = document.getElementsByTagName("IMG");
	var selected_count = get_object_length(selected_nodes);
	for (var i = 0; i < imgs.length; i++)
	{
		if (imgs[i].id && imgs[i].id.indexOf('button_') == 0)
		{
			imgs[i].className = 'tb_button_off';
			// здесь нужно писать условия при которых кнопки должны быть активны
			if (imgs[i].id == 'button_create' && selected_count == 1) { continue; }
			if (imgs[i].id == 'button_edit' && selected_count == 1) { continue; }
			if (imgs[i].id == 'button_delete' && selected_count) { continue; }
			if (imgs[i].id == 'button_move_up' && selected_count) { continue; }
			if (imgs[i].id == 'button_move_down' && selected_count) { continue; }
			if (imgs[i].id == 'button_move_top' && selected_count) { continue; }
			if (imgs[i].id == 'button_move_bottom' && selected_count) { continue; }
			imgs[i].className = 'tb_button_disabled';
		}
	}
}

function is_selected_node(id)
{
	if (selected_nodes[id]) { return true; }
	return false;
}

function do_node_selected(id)
{
	var o = $('node_content_' + id);
	if (o) { o.className = 'selected'; return true; }
	return false;
}

function select_node(id)
{
	if (do_node_selected(id)) { selected_nodes[id] = id; }
	check_all_buttons();
}

function unselect_all()
{
	for (i in selected_nodes)
	{ unselect_node(selected_nodes[i]); }
}

function unselect_node(id)
{
	var o = $('node_content_' + id);
	if (o) { o.className = 'not_selected'; }
	delete(selected_nodes[id]);
	check_all_buttons();
}

function restore_selection()
{
	for (i in selected_nodes)
	{
		if (!do_node_selected(selected_nodes[i]))
		{ unselect_node(selected_nodes[i]); }
	}
	check_all_buttons();
}

function save_clicked_state()
{ set_cookie(cookie_opened_roots_name, Base64.encode(serialize(cookie_opened_roots))); }

function restore_clicked_state()
{
	var restored = get_cookie(cookie_opened_roots_name);
	if (restored != null) { cookie_opened_roots = unserialize(Base64.decode(restored)); }
	else { cookie_opened_roots = {}; }
}

var open_node_child_list_timer = null;

function open_node_child_list(id, child_type)
{
	var list_url = '<?= url_for("-controller", "list", "only_type", isset($_GET["only_type"]) ? $_GET["only_type"] : null, "lang", isset($_GET["lang"]) ? $_GET["lang"] : null) ?>';
	list_url = append_url_param(list_url, 'id', id);
	if (child_type) { list_url = append_url_param(list_url, 'child_type', child_type); }
	parent.frames['frame_func'].location.href = list_url;
}

function clicked_on_node(id, evt)
{
	if (evt && !evt.ctrlKey && !evt.metaKey) { unselect_all(); }
	restore_clicked_state();
	cookie_opened_roots[root_window_url] = id;
	save_clicked_state();
	if (parent.frames['frame_func'])
	{
		if (open_node_child_list_timer) { clearTimeout(open_node_child_list_timer); }
		open_node_child_list_timer = setTimeout('open_node_child_list(' + id + ')', 500);
	}
	if (is_selected_node(id)) { unselect_node(id); } else { select_node(id); }
}

function clicked_on_node_type(parent_node_id, child_type, evt)
{
	restore_clicked_state();
	cookie_opened_roots[root_window_url] = parent_node_id;
	save_clicked_state();
	if (parent.frames['frame_func'])
	{
		if (open_node_child_list_timer) { clearTimeout(open_node_child_list_timer); }
		open_node_child_list(parent_node_id, child_type);
	}
}

function double_clicked_on_node(id)
{
	var params = { 'name': get_node_name(id), 'type': get_node_type(id) };
	<? if (isset($_GET["only_type"])): ?>
		if (parent.callback_function && params['type'] == '<?= j($_GET["only_type"]) ?>') { parent.callback_function(id, params); }
	<? else: ?>
		if (parent.callback_function) { parent.callback_function(id, params); }
	<? endif ?>
	else
	{
		if (open_node_child_list_timer) { clearTimeout(open_node_child_list_timer); }
		edit_node(id);
	}
}

function get_node_name(id)
{
	var o = $('node_name_' + id);
	if (o) { return o.innerText || o.textContent; } else { return ''; }
}

function get_node_type(id)
{
	var o = $('node_name_' + id);
	if (o) { return o.getAttribute('node_type', 2); } else { return null; }
}

function tb_button_click(obj)
{
	if (obj.className != 'tb_button_disabled')
	{
		if (obj.id.indexOf('button_') == 0)
		{
			var command_name = obj.id.substr(7);
			switch (command_name)
			{
				case 'move_up':
				case 'move_down':
				case 'move_top':
				case 'move_bottom':
					var params = [];
					for (i in selected_nodes) { params.push({'nodes[]': selected_nodes[i]}); }

					if (command_name == "move_top" || command_name == "move_bottom")
					{ params.push({'do': 'full_move'}); }
					else if (command_name == "move_up" || command_name == "move_down")
					{ params.push({'do': 'one_move'}); }

					if (command_name == "move_top" || command_name == "move_up")
					{ params.push({'direction': 'up'}); }
					else if (command_name == "move_bottom" || command_name == "move_down")
					{ params.push({'direction': 'down'}); }

					AJAX.run('<?= url_for("@overwrite", true, "action", "move") ?>', params, 'POST');
					break;

				case 'delete':
					var len = get_object_length(selected_nodes);
					var do_delete = false;
					if (len > 1)
					{
						if (confirm('Вы уверены что хотите удалить выбранные документы?\nВыбрано документов: ' + len))
						{ do_delete = true; }
					}
					else
					{
						for (i in selected_nodes)
						{
							if (confirm('Вы уверены что хотите удалить "' + get_node_name(selected_nodes[i]) + '" ?')) { do_delete = true; }
							break;
						}
					}

					if (do_delete)
					{
						var params = [];
						for (i in selected_nodes) { params.push({'nodes[]': selected_nodes[i]}); }
						AJAX.run('<?= url_for("@overwrite", true, "action", "delete") ?>', params, 'POST');
					}
					break;

				case 'create':
					for (i in selected_nodes) { create_node(null, selected_nodes[i]); break; }
					break;

				case 'edit':
					for (i in selected_nodes) { edit_node(selected_nodes[i]); break; }
					break;

				default:
					alert('Unknown button: ' + command_name);
					break;
			}
		}
	}
}

function create_node(type, parent_id) { open_window('<?= url_for("-controller", "node") ?>?parent_id=' + parent_id + (type ? '&type=' + type : '')); }
function edit_node(node_id) { open_window('<?= url_for("-controller", "node") ?>?id=' + node_id); }
<? A5::url_for_default("view") ?>
</script>

<div id="toolbar" style="position: absolute; left: 0px; top: 0px; width: 100%;">
	<table class="toolbarset"><tr><td>
		<table class="toolbar_group"><tr>
			<td class="tb_start"></td>
			<td><img class="tb_button_disabled" id="button_create" src="<?= CMS_PUBLIC_URI ?>/pics/create_document.gif" title="Добавить документ" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_edit" src="<?= CMS_PUBLIC_URI ?>/pics/edit_document.gif" title="Редактировать документ" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_delete" src="<?= CMS_PUBLIC_URI ?>/pics/delete.gif" title="Удалить документ" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
		</tr></table>
		<table class="toolbar_group"><tr>
			<td class="tb_start"></td>
			<td><img class="tb_button_disabled" id="button_move_up" src="<?= CMS_PUBLIC_URI ?>/pics/move_up.gif" title="Сдвинуть вверх" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_move_down" src="<?= CMS_PUBLIC_URI ?>/pics/move_down.gif" title="Сдвинуть вниз" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td class="tb_separator"></td>
			<td><img class="tb_button_disabled" id="button_move_top" src="<?= CMS_PUBLIC_URI ?>/pics/move_top.gif" title="Переместить в начало" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_move_bottom" src="<?= CMS_PUBLIC_URI ?>/pics/move_bottom.gif" title="Переместить в конец" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
		</td></tr></table>
	</td></tr></table>
</div>
<div id="tree_area" style="position: absolute; left: 0px; top: 29px; width: 100%; overflow: auto;" onclick="clicked_on_body(event);">
	<div style="display: none;" id="node_childs_root"></div>
</div>

<script type="text/javascript">
<!--
function reposition_frames()
{
	try
	{
		$('tree_area').style.height = document.body.offsetHeight - $('toolbar').offsetHeight + 'px';
		$('tree_area').style.top = $('toolbar').offsetHeight + 'px';
	} catch (e) {}
}
add_event_listener(window, 'load', function() { setTimeout(function() { reposition_frames(); }, 10); });
add_event_listener(window, 'resize', function() { setTimeout(function() { reposition_frames(); }, 10); });

restore_clicked_state();

<? if (isset($_GET["expand_to"])): ?>
	cookie_opened_roots[root_window_url] = '<?= j($_GET["expand_to"]) ?>';
<? endif ?>

if (cookie_opened_roots[root_window_url]) { expand_tree([ cookie_opened_roots[root_window_url] ]); }
else { expand_tree([ '<?= isset($_GET["id"]) ? j($_GET["id"]) : "" ?>' ], {'node_inclusive': true}); }

disable_selection($('toolbar'));
disable_selection($('tree_area'));
check_all_buttons();
//-->
</script>