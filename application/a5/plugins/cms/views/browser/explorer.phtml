<script type="text/javascript">
<? A5::url_for_default("javascript") ?>
var selected_nodes = {};
var blocked_for_select = {};
var current_folder = '<?= j($current_folder) ?>';

function clicked_on_body(evt)
{
	// Проверим не кликнули ли мы по узлу
	var is_clicked_on_node = false;
	if (evt)
	{
		var elem = evt.target || window.event.srcElement;
		try
		{
			while (elem)
			{
				if (elem.id.indexOf('node_icon_') >= 0) { is_clicked_on_node = true; break; }
				if (elem.id.indexOf('node_content_') >= 0) { is_clicked_on_node = true; break; }
				elem = elem.parentNode;
			}
		} catch (err) {;}
	}
	if (!is_clicked_on_node) { unselect_all(); }
}

function check_all_buttons()
{
	var selected_count = get_object_length(selected_nodes);
	var tagNames = ['IMG', 'DIV'];
	for (tagIndex in tagNames)
	{
		var tagName = tagNames[tagIndex];
		var objs = document.getElementsByTagName(tagName);
		for (var i = 0; i < objs.length; i++)
		{
			if (objs[i].id && objs[i].id.indexOf('button_') == 0)
			{
				objs[i].className = 'tb_button_off';
				// здесь нужно писать условия при которых кнопки должны быть активны
				if (objs[i].id == 'button_folder_up' && <?= strlen($current_folder) ?> > 0) { continue; }
				if (objs[i].id == 'button_create') { continue; }
				if (objs[i].id == 'button_download' && selected_count == 1)
				{
					var node_id = null;
					for (n in selected_nodes) { node_id = selected_nodes[n]; break; }
					if (node_id && get_node_type(node_id) == 'file') { continue; }
				}
				if (objs[i].id == 'button_delete' && selected_count) { continue; }
				if (objs[i].id == 'button_rename' && selected_count == 1) { continue; }
				<? if ($explorer_list_style == 0): ?>
					if (objs[i].id == 'button_full_list') { continue; }
				<? elseif ($explorer_list_style == 1): ?>
					if (objs[i].id == 'button_thumbs_list') { continue; }
				<? endif ?>
				objs[i].className = 'tb_button_disabled';
			}
		}
	}
}

function is_selected_node(id)
{
	if (selected_nodes[id]) { return true; }
	return false;
}

function do_node_selected(id)
{
	var o = $('node_content_' + id);
	if (o && !blocked_for_select[id]) { o.className = 'selected'; return true; }
	return false;
}

function highlight_node(id) { if (select_node(id)) $('tree_area').scrollTop = $('node_icon_' + id).offsetTop; }

function select_node(id)
{
	var result = false;
	if (do_node_selected(id)) { selected_nodes[id] = id; result = true; }
	check_all_buttons();
	return result;
}

function unselect_all()
{
	for (i in selected_nodes)
	{ unselect_node(selected_nodes[i]); }
}

function unselect_node(id)
{
	var o = $('node_content_' + id);
	if (o) { o.className = 'not_selected'; }
	delete(selected_nodes[id]);
	check_all_buttons();
}

function clicked_on_node(id, evt)
{
	if (evt && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey) { unselect_all(); }
	if (is_selected_node(id)) { unselect_node(id); } else { select_node(id); }

	// Calculate the number of this object
	var curr_idx = null;
	var objs = document.getElementsByTagName('TD');
	for (var i = 0, c = objs.length; i < c; i++)
	{
		if (objs[i].id == 'node_content_' + id)
		{ curr_idx = i; break; }
	}

	if (evt && evt.shiftKey)
	{
		var prev_idx = window.latest_clicked_number;
		var next_idx = curr_idx;

		if (prev_idx >= 0 && next_idx >= 0)
		{
			var start_idx = (prev_idx > next_idx ? next_idx : prev_idx);
			var finish_idx = (prev_idx > next_idx ? prev_idx : next_idx);
			for (var i = 0, c = objs.length; i < c; i++)
			{
				if (start_idx < i && i < finish_idx)
				{
					var node_id = objs[i].id.substr("node_content_".length);
					if (is_selected_node(node_id)) { unselect_node(node_id); }
					else { select_node(node_id); }
				}
			}
		}
	}

	if (curr_idx) { window.latest_clicked_number = curr_idx; }
}

function get_node_attr(id, attr_name)
{
	var o = $('node_name_' + id);
	if (o)
	{
		var node_attr = o.getAttribute(attr_name);
		if (node_attr != null) { return node_attr; }
	}
	return false;
}

function get_node_name(id) { return get_node_attr(id, 'node_name'); }
function get_node_type(id) { return get_node_attr(id, 'node_type'); }
function get_node_url(id) { return get_node_attr(id, 'node_url'); }
function get_node_full_url(id) { return get_node_attr(id, 'node_full_url'); }

function tb_button_click(obj)
{
	if (obj.className != 'tb_button_disabled')
	{
		if (obj.id.indexOf('button_') == 0)
		{
			var command_name = obj.id.substr(7);
			switch (command_name)
			{
				case 'delete':
					if (!is_empty_object(selected_nodes))
					{
						var len = get_object_length(selected_nodes);
						var do_delete = false;

						if (len > 1)
						{
							if (confirm('Вы уверены что хотите удалить выбранные объекты?\nВыбрано объектов: ' + len))
							{ do_delete = true; }
						}
						else
						{
							for (i in selected_nodes)
							{
								if (confirm('Вы уверены что хотите удалить ' + (get_node_type(selected_nodes[i]) == 'folder' ? 'папку' : 'файл') + ' "' + get_node_name(selected_nodes[i]) + '" ?')) { do_delete = true; }
								break;
							}
						}

						if (do_delete)
						{
							var params = [];
							for (i in selected_nodes) { params.push({'nodes[]': selected_nodes[i]}); }
							AJAX.run('<?= url_for("action", "delete", "root_path", $root_path, "parent_folder", $current_folder) ?>', params, 'POST');
						}
					}
					else { alert('Выберите хотя бы одну папку!'); }
					break;

				case 'create':
					create_folder();
					break;

				case 'download':
					if (!is_empty_object(selected_nodes))
					{
						var len = get_object_length(selected_nodes);
						if (len > 1) { alert('Невозможно скачать сразу несколько объектов! Выберите один!'); }
						else
						{
							var node_id = null;
							for (n in selected_nodes) { node_id = selected_nodes[n]; break; }
							if (node_id)
							{
								if (get_node_type(node_id) == 'file') { download_object(node_id); }
								else { alert('Скачивать можно только файлы!'); }
							}
						}
					}
					else
					{ alert('Выберите объект для скачивания!'); }
					break;

				case 'rename':
					if (!is_empty_object(selected_nodes))
					{
						var len = get_object_length(selected_nodes);
						if (len > 1) { alert('Невозможно переименовать сразу несколько объектов! Выберите один!'); }
						else
						{
							for (i in selected_nodes)
							{ rename_object(selected_nodes[i]); break; }
						}
					}
					else
					{ alert('Выберите объект для переименования!'); }
					break;

				case 'folder_up':
					location.href = '<?= url_for("root_path", $root_path, "path", $current_folder . "/../") ?>';
					break;

				case 'thumbs_list':
					location.href = '<?= url_for("root_path", $root_path, "list_style", 0) ?>';
					break;

				case 'full_list':
					location.href = '<?= url_for("root_path", $root_path, "list_style", 1) ?>';
					break;

				default:
					alert('Unknown button: ' + command_name);
					break;
			}
		}
	}
}

function create_folder()
{ open_window('<?= url_for("action", "create-folder", "root_path", $root_path, "parent_folder", $current_folder) ?>', {'width': 300, 'height': 100}); }

function download_object(id)
{
	var node_name = get_node_name(id);
	var node_type = get_node_type(id);
	if (node_name && node_type && node_type == 'file')
	{ location.href = '<?= url_for("-controller", "main", "action", "download") ?>?path=' + encodeURIComponent(get_node_url(id)); }
}

// Создаём форму редактирования объекта
function rename_object(id)
{
	var name_span = $('node_name_' + id);
	if (name_span)
	{
		unselect_node(id);
		blocked_for_select[id] = true;
		var node_name = get_node_name(id);
		var node_type = get_node_type(id);
		var inp = document.createElement('INPUT');
		var wait_html = '<span class="graytext">Ждите...</span>';
		inp.type = "text"; inp.name = "name"; inp.value = node_name;
		inp.style.cssText = "width: 106px; border: 1px solid #000000;";
		name_span.innerHTML = '';
		name_span.appendChild(inp);
		enable_selection($('tree_area'));
		add_event_listener(inp, 'keydown', function(e)
		{
			if (e.keyCode == 27) { inp.value = node_name; inp.blur(); }
			else if (e.keyCode == 13) { inp.blur(); }
		});
		add_event_listener(inp, 'blur', function(e)
		{
			disable_selection($('tree_area'));
			delete(blocked_for_select[id]);
			if (node_name != inp.value)
			{
				AJAX.run('<?= url_for("action", "rename", "root_path", $root_path, "parent_folder", $current_folder) ?>', { 'node_id': id, 'old_name': node_name, 'new_name': inp.value, 'debug_errors': true }, 'POST');
				name_span.innerHTML = wait_html;
			}
			else { name_span.innerHTML = node_name; }
			return true;
		});
		inp.focus();
	}
}

function call_callback(path, params)
{
	if (parent.callback_function)
	{ parent.callback_function(path, params); }
	else { parent.window.close(); }
}
<? A5::url_for_default("view") ?>
</script>

<div id="toolbar" style="position: absolute; left: 0px; top: 0px; width: 100%;">
	<div class="wtitle"><div><span>Текущая папка:</span> <?= h(substr_ltrim(rtrim(ROOT_FOLDER . "/" . $current_folder, "/"), PUBLIC_DIR)) ?></div></div>
	<table class="toolbarset"><tr><td>
		<table class="toolbar_group"><tr>
			<td class="tb_start"></td>
			<td><div class="tb_button_disabled" id="button_create" title="Создать папку" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"><div><img src="<?= CMS_PUBLIC_URI ?>/pics/create_folder.gif" style="float: left; width: 21px; height: 21px; border: 0px; margin-top: -4px;">Создать папку</div></div></td>
			<td><div class="tb_button_disabled" id="button_rename" title="Переименовать папку/файл" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"><div><img src="<?= CMS_PUBLIC_URI ?>/pics/edit_document.gif" style="float: left; width: 21px; height: 21px; border: 0px; margin-top: -4px;">Переименовать</div></div></td>
			<td><div class="tb_button_disabled" id="button_download" title="Скачать файл" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"><div><img src="<?= CMS_PUBLIC_URI ?>/pics/download.gif" style="float: left; width: 16px; height: 16px; border: 0px; margin: -2px 2px 0px 2px;">Скачать</div></div></td>
			<td><img class="tb_button_disabled" id="button_delete" src="<?= CMS_PUBLIC_URI ?>/pics/delete.gif" title="Удалить папку/файл" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
		</tr></table>
		<table class="toolbar_group"><tr>
			<td class="tb_start"></td>
			<td><img class="tb_button_disabled" id="button_folder_up" src="<?= CMS_PUBLIC_URI ?>/pics/folder_up.gif" title="Подняться на папку выше" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_thumbs_list" src="<?= CMS_PUBLIC_URI ?>/pics/thumbs.gif" title="Выводить в виде представлений" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
			<td><img class="tb_button_disabled" id="button_full_list" src="<?= CMS_PUBLIC_URI ?>/pics/list_document.gif" title="Выводить списком" onclick="tb_button_click(this);" onmouseover="tb_button_over(this);" onmouseout="tb_button_out(this);"></td>
		</td></tr></table>
	</td></tr></table>
</div>
<div id="tree_area" style="position: absolute; left: 0px; top: 51px; width: 100%; overflow: auto;" onclick="clicked_on_body(event);">
<? include_view("load-files") ?>
</div>

<script type="text/javascript">
<!--
function reposition_frames()
{
	try
	{
		$('tree_area').style.height = document.body.offsetHeight - $('toolbar').offsetHeight + 'px';
		$('tree_area').style.top = $('toolbar').offsetHeight + 'px';
	} catch (e) {}
}
add_event_listener(window, 'load', function() { setTimeout(function() { reposition_frames(); }, 10); });
add_event_listener(window, 'resize', function() { setTimeout(function() { reposition_frames(); }, 10); });
check_all_buttons();
disable_selection($('toolbar'));
disable_selection($('tree_area'));
<? if ($highlight_node !== false): ?>
	add_event_listener(window, 'load', function() { highlight_node('<?= j($highlight_node) ?>'); });
<? endif ?>
//-->
</script>
