<?php
/*
Модули - модули это файлы с именем <имя типа>.php например для типа "documents"
нужно создать файл: documents.php в котором описать функции со специальными именами, которые
будут производить иные от стандартных действий при управлении в админке.
Пользовательские модули нужно располагать в папке CMS_MODULES_DIR располагающейся обычно в корне папки application.

=============================================================================================================================
Описание функций для вывода списка нод определённого типа
=============================================================================================================================
*/

/***************************************************************************************************************************/
function cms_get_type_field_list(string $type)
/***************************************************************************************************************************/

/*
Функция предназначена для изменения набора полей выводимых при листинге узлов указанного типа (передаётся первым параметром).
Пример полного вида:
*/

function cms_get_type_field_list($type)
{
	return array
	(
		array("name", "Название", "string"),
		array("email", "E-mail", "email"),
	);
}

/*
Для каждого поля не обязательно указывать все три параметра, любой из них кроме sql-названия поля можно опустить.
Упрощенный вариант:
*/

function cms_get_type_field_list($type)
{
	return array
	(
		"name",
		"email"
	);
}

/*
В обоих случаях все недостающие данные о полях по возможности будут браться из описания полей для данного типа.
*/

/***************************************************************************************************************************/
function cms_get_type_nodes_count(string $type, int $parent_id)
/***************************************************************************************************************************/

/*
Функция для подсчета количества выводимых нод указанного типа.
Пример:
*/

function cms_get_type_nodes_count($type, $parent_id)
{ return db_select_cell("SELECT COUNT(*) FROM v_documents WHERE parent_id = ?i", $parent_id); }

/***************************************************************************************************************************/
function cms_get_type_nodes(string $type, integer $parent_id, integer $offset = null, integer $limit = null)
/***************************************************************************************************************************/

/*
Функция для получения данных списка нод указанного типа.
Внимание, при вызове данной функции в массиве $_GET может содержаться параметр "sort_cond" - условие для сортировки.
Параметр пригоден для прямого использования в качестве значения для "@order" условия в sql-запросах.
Крайне желательно учитывать данный параметр для удобства пользования административной частью конечным пользователем.
Пример:
*/

function cms_get_type_nodes($type, $parent_id, $offset = null, $limit = null)
{
	$where = array();
	$where["parent_id"] = $parent_id;

	if (isset($_GET["sort_cond"])) { $where["@order"] = $_GET["sort_cond"]; } else { $where["@order"] = "sibling_index ASC"; }

	if ($offset) { $where["@offset"] = $offset; }
	if ($limit) { $where["@limit"] = $limit; }

	return db_select_all("
	SELECT
		*
	FROM
		v_documents
	", $where);
}

/*
=============================================================================================================================
Описание функций управлением редактирования ноды:
=============================================================================================================================
*/

/***************************************************************************************************************************/
function cms_check_node_data(string $action, object $FormProcessor)
/***************************************************************************************************************************/

/*
Функция для проверки вводимых данных. Запускается перед началом стандартной проверки данных.
Если в данной функции будет истановлена ошибка по какому-либо полю, то стандартная проверка по данному полю уже проводится не будет.
$action - тип действия ("add" - добавление ноды, "mod" - изменение)
$FormProcessor - экземпляр объекта FormProcessor, который нужно использовать для проверки данных и установления ошибок.
Пример:
*/

function cms_check_node_data($action, $form)
{
	if ($action == "add") { $form->check("login", "not_empty"); }
}

/***************************************************************************************************************************/
function cms_after_check_node_data(string $action, object $FormProcessor)
/***************************************************************************************************************************/

/*
Дополнительная функция проверки данных, запускаемая ПОСЛЕ пользовательской (описано выше) и после стандартной проверки полей
В ней можно дополнительно установить какие-то ошибки или наоборот исключить ненужные ошибки.
Пример:
*/

function cms_after_check_node_data($action, $form)
{
	if ($action == "mod")
	{
		// Если пароль пустой - убираем любые ошибки по этому полю
		if (is_empty($_POST["password"]))
		{ $form->unset_error("password"); }
	}
}

/***************************************************************************************************************************/
function cms_get_node_field_names()
/***************************************************************************************************************************/

/*
Информационная функция использующаяся при проверке ошибок
Функция возвращает массив имён полей в виде array("form_field_name" => "human_field_name")
Функция полезна если вы используете какую-то свою форму редактирования содержащую свои
собственные имена полей, которых нет в наборе редактируемого типа ноды.
Если по данным полям будут выводится какие-то сообщения об ошибках, то имена полей для
человека будут дополнены из значения данной функции. Также используя данную функцию можно
изменить название полей для человека вернув новые имена для стандартных названий полей.
Пример использования:
*/

function cms_get_node_field_names()
{
	return array
	(
		"name" => "Заголовок",
		"email" => "E-mail для подтверждения",
	)
}

/***************************************************************************************************************************/
function cms_set_node_data(string $action)
/***************************************************************************************************************************/

/*
Функция для сохранения данных.
Функция ДОЛЖНА возвращать id добавленной ноды при добавлении. Массив $_POST можно
только дополнять своими данными, т.к. в нём могут быть переданы значения стандартных полей,
которые желательно бы сохранить. Предпочтительно для сохранения данных использовать функцию
set_node_data(array $array)

При редактировании объекта ($action == "mod") будет известно $_POST["id"] объекта.
При добавлении - $action == "add"

Пример:
*/

function cms_set_node_data(string $action) { return set_node_data($_POST); }

/***************************************************************************************************************************/
function cms_get_node_data($id)
/***************************************************************************************************************************/

/*
Функция для получения данных о ноде при её редактировании. Должна возвращать массив с данными ноды.
Вызов функции происходит один раз при открытии формы редактирования объекта.
$id - всегда будет содержать "id" редактируемого объекта.

Пример:
*/

function cms_get_node_data($id)
{ return db_select_row("SELECT * FROM v_documents WHERE id = ?i", $id); }

/***************************************************************************************************************************/
function cms_show_node_form(string $action)
/***************************************************************************************************************************/

/*
Функция для вывода формы редактирования ноды.

Перед выводом формы, возможно вы захотите подкорректировать её стандартный вывод.
В файлах cms/node/form.helpers.php и cms/include/helpers.php есть набор функций упрощающий
генерацию формы для редактирования объектов.

Вот краткое описание данных функций:

standard_form() - вызов данной функции приведёт к выводу (генерации) стандартной формы редактирования объекта
при её использовании вы не должны выводить что-либо, иначе форма может быть повреждена.

disable_shared_fields(bool $is_disable) и disable_additional_tab(bool $is_disable)
Передав true или false вы можете изменить вывод вкладки "Дополнительно", а также вывод полей в верхней части формы.

start_form(array $params) и finish_form() - выводит начало и конец формы с единственная вкладкой "Основная информация",
между вызовами этих функция вы можете выводить любые html данные, которые будут отображены вместо формы.
Поведение данных функций зависит от вызовов disable_shared_fields() и disable_additional_tab()
В функцию start_form вы можете передать набор параметров для вывода их в тэге <form>

start_tab(string $name, bool $is_disabled = false) - выведет новую вкладку с указанным именем

disable_fields(array $fields) - вы можете передать массив - список имён полей, которые не нужно
выводить при стандартной генерации формы, при этом они не будут переданы в массив $_POST
при сохранении, и как следствие - не будут сохранены.

disable_childs(array $childs) - вы можете передать массив - список типов, которые не нужно выводить
с помощью отдельных вкладок если они являются дочерними для данного объекта.

Вы можете скрыть как стандартные поля (lang, url_id, is_hidden, is_menuitem, title, meta_keywords, meta_description)
Так и любые другие поля данного объекта.

Пример:
*/

function cms_show_node_form($action)
{
	start_form();
	?>
	<input type="text" name="name" size="20">
	<?
	start_tab("Вкладка");
	?>
	.....
	<?
	finish_form();
}

/***************************************************************************************************************************/
function cms_get_root_node_for_field_name($name)
/***************************************************************************************************************************/

/*
Функция для получения id корневой ноды для вывода списка объектов для выбора.
Используеться при стандартном выводе формы и при стандартной форме добавления one2many.
При редактировании или добавлении объекта всегда известно $_POST["parent_id"] ноды
к которой он добавляеться или которая являеться его родительской. Обычно этого достаточно
чтобы определить какие объекты нужно дать выбирать пользователю для поля типа "object".
На вход функция принимает параметр - имя поля, для которого этот root нужно возвратить.
Это полезно если у объекта несколько таких полей. Если функция ничего не вернёт или
вернёт false - то будет использоваться стандартная нода из метаданных.

Пример:
*/

function cms_get_root_node_for_field_name($name)
{
	if ($name == "node_id") { return db_select_cell("SELECT parent_id FROM cms_nodes WHERE id = ?i", $_POST["parent_id"]); }
}