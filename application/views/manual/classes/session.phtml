<ul class="breadcrumb">
  <li>
    <a href="/manual">Manual</a> <span class="divider">/</span>
  </li>
  <li>
    <a href="/manual/classes">Classes</a> <span class="divider">/</span>
  </li>
  <li>
    <li class="active">Sesseion</li>
  </li>
</ul>


<table class="table">
  <thead>	
  </thead>
  <tbody>
  
	<tr>				
		<td>
		<p>
Класс для работы с пользовательскими сессиями.
Основные возможности:<br/>
- возможность ведения нескольких сессий одновременно с разным временем жизни<br/>
- возможность установки разного времени хранения для конкретного пользователя в пределах одной и той же сессии<br/>
- встроенный механизм реализации flash-переменных<br/><br/>

ПОЯСНЕНИЯ О ПРИНЦИПЕ РАБОТЫ<br/>
---------------------------<br/>
Старт новой сессии производится вызовом Session::start(string $name[, array $params])<br/>
Например, при вызове Session::start("test") будет произведена попытка чтения данных сессии.<br/>
Данные буду восстановлены в массив $_SESSION["test"]. Если данных нет, или они устарели, либо<br/>
есть другая причина по которой данные не могут быть восстановлены, то $_SESSION["test"] будет<br/>
неопределена.<br/><br/>

После старта сессии, при втором и последующих вызовах - ничего происходить не будет.<br/><br/>

При старте новой сессии вторым параметром можно передать ключи для уточнения параметров сессии.<br/><br/>

Существуют следующие параметры:<br/>
"expire"- время в секундах, время жизни сессии, 0 - означает до закрытия браузера, по-умолчанию: 0<br/>
"path" - путь по которому сессия будет доступна (используется в setcookie), например: /admin, по-умолчанию: /<br/>
"domain" - домен по которому сессия будет доступна (используется в setcookie), например: .example.com<br/>
"secure" -  true или false. Использовать ли SSL (используется в setcookie), по-умолчанию false.<br/>
"protected" - true или false. Защищённая ли сессия, если true то при считывании данных и сохранении данных<br/>
              сессии будет проверяться IP-адрес с которого сессия стартовала, если он не совпадает - данные восстановлены не будут.<br/>
              по-умолчанию: false<br/>
"ip" - IP-адрес для защищённых сессий, по-умолчанию: текущий ($_SERVER['REMOTE_ADDR'])<br/><br/><br/>


Session::alter()<br/>
С помощью данного вызова (но только после вызова Session::start()) вы можете<br/>
изменить время хранения данной сессии, а также остальные параметры перечисленые выше.<br/>
Таким образом используя Session::alter() для уже инициализированной сессии вы измените её время<br/>
хранения на новое КОНКРЕТНО ДЛЯ ТЕКУЩЕГО пользователя. Все сессии с данным именем стартовавшие ранее затронуты не будут.<br/>
При следующей загрузке страницы при вызове функции Session::start(), и при наличии данной сессии будет использоваться<br/>
время хранения которое было указано для неё в последний раз.<br/>
Если вы хотите удалить данную сессию - вызовите функцию Session::alter() с отрицательным параметром sess_expire, либо вызовите<br/>
Session::destroy(string $session_id) - $session_id можно получить вызовом Session::id(string $session_name)<br/><br/>

ИСПОЛЬЗОВАНИЕ Flash-переменных<br/>
------------------------------<br/>
Чтобы использовать flash-переменные нужно инициализировать механизм при старте приложения вызовом:<br/>
Session::flash_init();<br/><br/>

После данного вызова можно использовать Session::flash().<br/>
В приложении рекомендуется создать более удобный хелпер flash() который будет вызывать данный метод.<br/><br/>

Что такое flash-переменные? Это переменные которые сохраняются в специальной сессии, которые будут доступны при следующей загрузке страницы.<br/>
После этого эти переменные исчезают навсегда. Это удобно например для оповещения пользователя каким-то сообщением единжды.<br/>
К примеру после сохранения каких либо данных в контроллере можно вызвать: flash("notice", "Данные успешно сохранены!") и затем<br/>
перенаправить браузер на какую-нибудь страницу где используется вызов flash("notice").<br/>
После редиректа flash("notice") - вернёт "Данные успешно сохранены!" и это можно оформить в виде:<br/>
<pre class="prettyprint">
&lt;? if (flash("notice")): &gt;>
	&lt;script&gt;alert('&lt;?= flash("notice") ?&gt;');&lt;/script&gt;
&lt;? endif ?&gt;
</pre>	
		</p>	
		
	</tr>
	
	
	
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::start($sess_name, $sess_params = array())</pre>		
		<p>
		
		</p>
		</td>
	</tr>
	
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::id($sess_name)</pre>		
		<p>
		Возвращает id сессии по её имени, или null если сессия не стартовала
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::cookie_name($sess_name)</pre>		
		<p>
		Формирует имя куки для сессии по имени сессии
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::generate_id()</pre>		
		<p>
		Функция генерации уникального id сессии
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::regenerate_id($sess_name)</pre>		
		<p>
		Перегенерить id для текущей сессии
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::alter($sess_name, $sess_params = array())</pre>		
		<p>
		Изменения данных о сессии - должен вызываться после Session::start - изменяет данные только существующих сессий
	<br/>Изменяет только переданные параметры, остальные остаются без изменений
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::read($sess_id, $is_check = false)</pre>		
		<p>
		Метод чтения данных сессии - возвращает данные сессии. Попутно можно проверить на безопасность используя второй ключ (если это требуется).
	<br/>Данный метод можно безопасно использовать для считывания данных сессии без необходимости её старта - данные сессии этот метод вернёт вам,
	<br/>а супер-глобальный массив $_SESSION затронут не будет. Однако следует учесть что если вы используете данный метод, то скорее всего
	<br/>данные этой сессии будут заблокированы до тех пор пока вы не вызовете write() или destroy()
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::write($sess_id, $data, $params)</pre>		
		<p>
		Функция записи данных сессии
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::destroy($sess_id) { self::delete($sess_id); }</pre>		
		<p>
		Уничтожение данных сессии
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::close_all()</pre>		
		<p>
		Функция сохранения данных для всех открытых в данный момент сессий
		</p>
		</td>
	</tr>
	<tr>				
		<td>	
		<pre class="prettyprint">Session::close($sess_name)</pre>		
		<p>
		Закрывает ранее открытую сессиию (с сохранением данных)
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::flash_init($sess_name = "___flashdata___")</pre>		
		<p>
		Функцию нужно вызывать в самом начале приложения для инициализации flash-переменных - лучше вызывать всегда
	<br/>Стартует новую сессию с имеем ___flashdata___ или именем указанным первым параметром в данной функции
		</p>
		</td>
	</tr>
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::flash($name, $value = null)</pre>		
		<p>
		Получение или установка flash-переменной
		</p>
		</td>
	</tr>
	
	
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::read_raw($sess_id)</pre>		
		<p>
		Метод чтения данных сессии - считывает данные с помощью обработчика и приводит их к нормальному виду.
		</p>
		</td>
	</tr>
	
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::is_valid($sess)</pre>		
		<p>
		Сессия не проходит проверку если она защищённая и ай-пи не совпадает
		</p>
		</td>
	</tr>
	
	
	<tr>				
		<td>	
		<pre class="prettyprint">Session::sanitize($params)</pre>		
		<p>
		Функция из переданного массива создаёт массив только с реально правильными параметрыми сессии или их дефолт-значениями
		</p>
		</td>
	</tr>
	

	
	
  </tbody>
</table>